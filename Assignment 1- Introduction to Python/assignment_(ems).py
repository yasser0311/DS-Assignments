# -*- coding: utf-8 -*-
"""Assignment (EMS).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZBStuCqLmcVdfV5Od0rRuSDPOx2GQXer
"""

def main_menu():
    """
    Displays the main menu and handles user input to navigate through the EMS.
    """
    while True:
        print("\nEmployee Management System (EMS)")
        print("1. Add Employee")
        print("2. View All Employees")
        print("3. Search Employee")
        print("4. Exit")

        choice = input("Enter your choice (1-4): ")

        if choice == '1':
            add_employee()
        elif choice == '2':
            view_employees()
        elif choice == '3':
            search_employee()
        elif choice == '4':
            print("Thank you for using the Employee Management System. Goodbye!")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

def add_employee():
    """
    Adds a new employee to the system after validating the input.
    """
    print("\nAdd New Employee")

    while True:
        try:
            emp_id = int(input("Enter Employee ID: "))
            if emp_id in employees:
                print(f"Employee ID {emp_id} already exists. Please enter a different ID.")
                continue
            break
        except ValueError:
            print("Invalid input. Employee ID must be a number.")

    name = input("Enter Employee Name: ").strip()

    while True:
        try:
            age = int(input("Enter Employee Age: "))
            if age < 18 or age > 65:
                print("Age must be between 18 and 65.")
                continue
            break
        except ValueError:
            print("Invalid input. Age must be a number.")

    department = input("Enter Employee Department: ").strip()

    while True:
        try:
            salary = float(input("Enter Employee Salary: "))
            if salary <= 0:
                print("Salary must be a positive number.")
                continue
            break
        except ValueError:
            print("Invalid input. Salary must be a number.")

    employees[emp_id] = {
        'name': name,
        'age': age,
        'department': department,
        'salary': salary
    }

    print(f"\nEmployee {name} with ID {emp_id} has been successfully added!")

def view_employees():
    """
    Displays all employees in a table-like format.
    """
    print("\nEmployee List")
    print("-" * 60)

    if not employees:
        print("No employees available.")
        return

    # Table header
    print(f"{'ID':<10}{'Name':<20}{'Age':<10}{'Department':<15}{'Salary':<15}")
    print("-" * 60)

    # Table rows
    for emp_id, details in employees.items():
        print(f"{emp_id:<10}{details['name']:<20}{details['age']:<10}"
              f"{details['department']:<15}{details['salary']:<15.2f}")

def search_employee():
    """
    Searches for an employee by ID and displays their details if found.
    """
    print("\nSearch Employee")

    try:
        emp_id = int(input("Enter Employee ID to search: "))
    except ValueError:
        print("Invalid input. Employee ID must be a number.")
        return

    employee = employees.get(emp_id)

    if employee:
        print("\nEmployee Details")
        print("-" * 30)
        print(f"ID: {emp_id}")
        print(f"Name: {employee['name']}")
        print(f"Age: {employee['age']}")
        print(f"Department: {employee['department']}")
        print(f"Salary: {employee['salary']:.2f}")
    else:
        print(f"Employee with ID {emp_id} not found.")

# Initialize the employee dictionary with sample data
employees = {
    101: {'name': 'Satya', 'age': 27, 'department': 'HR', 'salary': 50000},
    102: {'name': 'John', 'age': 32, 'department': 'IT', 'salary': 75000},
    103: {'name': 'Alice', 'age': 25, 'department': 'Finance', 'salary': 60000}
}

# Start the program
if __name__ == "__main__":
    main_menu()